{"instance_id": "astropy__astropy-11693", "model_name_or_path": "openai/gpt-4o-mini", "model_patch": "diff --git a/astropy/wcs/wcsapi/fitswcs.py b/astropy/wcs/wcsapi/fitswcs.py\nindex 1234567..abcdef0 100644\n--- a/astropy/wcs/wcsapi/fitswcs.py\n+++ b/astropy/wcs/wcsapi/fitswcs.py\n@@ -323,7 +323,7 @@ class WCS(object):\n         Args:\n             *world_arrays: World coordinates to be converted.\n \n-        Returns:\n+        Returns: \n             Pixel coordinates corresponding to `world_arrays`.\n         \"\"\"\n         pixel = self.all_world2pix(*world_arrays, 0, quiet=True)\n"}
{"instance_id": "astropy__astropy-12057", "model_name_or_path": "openai/gpt-4o-mini", "model_patch": "diff --git a/astropy/nddata/uncertainty.py b/astropy/nddata/uncertainty.py\nindex e69de29..e7c8c32 100644\n--- a/astropy/nddata/uncertainty.py\n+++ b/astropy/nddata/uncertainty.py\n@@ -0,0 +1,35 @@\n+from astropy.nddata import (\n+    VarianceUncertainty, StdDevUncertainty, InverseVariance,\n+)\n+\n+def std_to_var(obj):\n+    return VarianceUncertainty(obj.array ** 2, unit=obj.unit ** 2)\n+\n+def var_to_invvar(obj):\n+    return InverseVariance(obj.array ** -1, unit=obj.unit ** -1)\n+\n+def invvar_to_var(obj):\n+    return VarianceUncertainty(obj.array ** -1, unit=obj.unit ** -1)\n+\n+def var_to_std(obj):\n+    return StdDevUncertainty(obj.array ** 0.5, unit=obj.unit ** 0.5)\n+\n+FUNC_MAP = {\n+    (StdDevUncertainty, VarianceUncertainty): std_to_var,\n+    (StdDevUncertainty, InverseVariance): lambda x: var_to_invvar(\n+        std_to_var(x)\n+    ),\n+    (VarianceUncertainty, StdDevUncertainty): var_to_std,\n+    (VarianceUncertainty, InverseVariance): var_to_invvar,\n+    (InverseVariance, StdDevUncertainty): lambda x: var_to_std(\n+        invvar_to_var(x)\n+    ),\n+    (InverseVariance, VarianceUncertainty): invvar_to_var,\n+    (StdDevUncertainty, StdDevUncertainty): lambda x: x,\n+    (VarianceUncertainty, VarianceUncertainty): lambda x: x,\n+    (InverseVariance, InverseVariance): lambda x: x,\n+}\n+\n+def convert_uncertainties(obj, new_class):\n+    return FUNC_MAP[(type(obj), new_class)](obj)"}
{"instance_id": "astropy__astropy-12318", "model_name_or_path": "openai/gpt-4o-mini", "model_patch": "diff --git a/astropy/modeling/models/blackbody.py b/astropy/modeling/models/blackbody.py\nindex 1234567..89abcde 100644\n--- a/astropy/modeling/models/blackbody.py\n+++ b/astropy/modeling/models/blackbody.py\n@@ -15,6 +15,7 @@\n import numpy as np\n from astropy import units as u\n from astropy.modeling import Model\n+from astropy.modeling.parameters import Parameter\n from astropy.modeling.models import _ModelMeta\n from astropy.utils.decorators import deprecated\n from astropy.utils.exceptions import AstropyDeprecationWarning\n@@ -190,7 +191,7 @@ class BlackBody(Model):\n         flux = self._flux(temperature, self._wavelength)\n         if self.scale is not None:\n             scale = self.scale.to_value(u.dimensionless_unscaled)\n-            flux *= scale\n+            flux *= Parameter(scale)\n         return flux * u.erg / (u.cm**2 * u.s)\n \n     @property\n"}
