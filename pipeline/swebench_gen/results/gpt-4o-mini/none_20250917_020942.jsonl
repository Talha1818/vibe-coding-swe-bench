{"instance_id": "astropy__astropy-11693", "model_name_or_path": "gpt-4o-mini", "model_patch": "diff --git a/astropy/wcs/wcsapi/fitswcs.py b/astropy/wcs/wcsapi/fitswcs.py\nindex 1234567..89abcde 100644\n--- a/astropy/wcs/wcsapi/fitswcs.py\n+++ b/astropy/wcs/wcsapi/fitswcs.py\n@@ -323,7 +323,7 @@ class WCS(...):\n         ...\n         \"\"\"\n         ...\n-        pixel = self.all_world2pix(*world_arrays, 0)\n+        pixel = self.all_world2pix(*world_arrays, 0, quiet=True)\n         return pixel[0] if self.pixel_n_dim == 1 else tuple(pixel)"}
{"instance_id": "astropy__astropy-12057", "model_name_or_path": "gpt-4o-mini", "model_patch": "--- a/astropy/nddata/uncertainty.py\n+++ b/astropy/nddata/uncertainty.py\n@@ -1,6 +1,57 @@\n from astropy.nddata import (\n     VarianceUncertainty, StdDevUncertainty, InverseVariance,\n+    NDData\n )\n \n def std_to_var(obj):\n     return VarianceUncertainty(obj.array ** 2, unit=obj.unit ** 2)\n \n def var_to_invvar(obj):\n     return InverseVariance(obj.array ** -1, unit=obj.unit ** -1)\n \n def invvar_to_var(obj):\n     return VarianceUncertainty(obj.array ** -1, unit=obj.unit ** -1)\n \n def var_to_std(obj):\n     return VarianceUncertainty(obj.array ** 0.5, unit=obj.unit ** 0.5)\n\n+def convert_stddev_to_variance(data):\n+    return VarianceUncertainty(data.array**2, unit=data.unit**2)\n+\n+def convert_variance_to_stddev(data):\n+    return StdDevUncertainty(data.array**0.5, unit=data.unit**0.5)\n+\n+def convert_variance_to_invvar(data):\n+    return InverseVariance(1/data.array, unit=data.unit**-1)\n+\n+def convert_invvar_to_variance(data):\n+    return VarianceUncertainty(1/data.array, unit=data.unit**-1)\n+\n+def convert_invvar_to_stddev(data):\n+    var = convert_invvar_to_variance(data)\n+    return convert_variance_to_stddev(var)\n+\n+def convert_stddev_to_invvar(data):\n+    var = convert_stddev_to_variance(data)\n+    return convert_variance_to_invvar(var)\n+\n+def convert_uncertainties(nddata: NDData, new_class):\n+    if not isinstance(nddata, NDData):\n+        raise TypeError(\"Input must be an instance of NDData.\")\n+\n+    if new_class == StdDevUncertainty:\n+        return convert_variance_to_stddev(nddata.uncertainty)\n+    elif new_class == VarianceUncertainty:\n+        if isinstance(nddata.uncertainty, StdDevUncertainty):\n+            return convert_stddev_to_variance(nddata.uncertainty)\n+        return nddata.uncertainty\n+    elif new_class == InverseVariance:\n+        if isinstance(nddata.uncertainty, StdDevUncertainty):\n+            return convert_stddev_to_invvar(nddata.uncertainty)\n+        elif isinstance(nddata.uncertainty, VarianceUncertainty):\n+            return convert_variance_to_invvar(nddata.uncertainty)\n+        return nddata.uncertainty\n+    else:\n+        raise ValueError(f\"Unsupported uncertainty class: {new_class}\")\n \n FUNC_MAP = {\n     (StdDevUncertainty, VarianceUncertainty): std_to_var,\n     (StdDevUncertainty, InverseVariance): lambda x: var_to_invvar(\n         std_to_var(x)\n     ),\n     (VarianceUncertainty, StdDevUncertainty): var_to_std,\n     (VarianceUncertainty, InverseVariance): var_to_invvar,\n     (InverseVariance, StdDevUncertainty): lambda x: var_to_std(\n         invvar_to_var(x)\n     ),\n     (InverseVariance, VarianceUncertainty): invvar_to_var,\n     (StdDevUncertainty, StdDevUncertainty): lambda x: x,\n     (VarianceUncertainty, VarianceUncertainty): lambda x: x,\n     (InverseVariance, InverseVariance): lambda x: x,\n }"}
